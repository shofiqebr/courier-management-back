MERN Stack Assignment: Courier and Parcel Management System
Objective:
Build a courier tracking and parcel management system for a logistics company.
Users can book parcels, assign delivery agents, track parcels in real-time, and manage delivery
statuses.
Functional Requirements:
Roles:
- Admin
- Delivery Agent
- Customer
Customer Features:
- Register/Login
- Book a parcel pickup (pickup address, delivery address, parcel size/type, COD or
prepaid)
- View booking history & statuses
- Track parcel in real-time on a map
Delivery Agent Features:
- View assigned parcels
- Update status (Picked Up, In Transit, Delivered, Failed)
- Get optimized delivery route (Google Maps API)
Admin Features:
- Dashboard with parcel metrics (daily bookings, failed deliveries, COD amounts)
- Assign agents to parcels
- View all users and bookings
- Export reports (CSV/PDF)
Backend (Node.js + Express or NestJS + PostgreSQL/Mongodb + JWT):
- APIs:
- Auth (Register/Login with roles)
- Parcel CRUD
- Agent assignment
- Parcel status updates
- Booking analytics & reports
- Geolocation tracking via coordinates

- Role-based access control (middleware)
Frontend:
- Web App for Admin and Customers
- Real-time updates via Socket.IO (status changes)
- Google Maps Integration for tracking and route view
Advanced (Bonus):
- QR Code generation for parcels
- Barcode scan by agents to confirm pickup/delivery
- Email/SMS notifications for customers
- Multi-language support (e.g., English & Bengali)
Deliverables:
- GitHub repo with documentation
- Hosted Web App (e.g., Vercel/Netlify)
- Postman collection for backend API
- Final PDF report + video demo
Evaluation Criteria:
- Functional completeness
- Code structure and clean architecture
- Responsive UI and UX polish
- Real-time updates and geolocation handling
- Real-world use cases like COD, failed deliveries, and reports

router.get('/dashboard', auth(['admin']), analyticsController.getStats);
authRouter.post(
  '/auth/register',
  validateRequest(AuthValidation.registerValidationSchema),
  authController.register
);

authRouter.post(
  '/auth/login',
  validateRequest(AuthValidation.loginValidationSchema),
  authController.login
);

parcelRouter.post(
  '/parcel',
  auth(['customer']),
  validateRequest(ParcelValidation.createParcelZodSchema),
  parcelController.createParcel
);

parcelRouter.get(
  '/parcel/my-bookings',
  auth(['customer']),
  parcelController.getMyParcels
);

parcelRouter.get(
  '/parcel/:id',
  auth(['admin', 'customer', 'delivery']),
  parcelController.getSingleParcel
);

parcelRouter.get(
  '/parcel',
  auth(['admin']),
  parcelController.getAllParcels
);

parcelRouter.patch(
  '/parcel/:id/status',
  auth(['delivery']),
  validateRequest(ParcelValidation.updateStatusSchema),
  parcelController.updateStatus
);

parcelRouter.post(
  '/assign-agent',
  auth(['admin']),
  parcelController.assignAgent
);

router.get('/export', auth(['admin']), reportController.exportCSV);

UserRoutes.get('/user', auth(['admin']), userController.getAllUsers);
UserRoutes.get('/user/:id', auth(['admin', 'agent', 'customer']), userController.getSingleUser);
UserRoutes.patch('/user/:id', auth(['admin']), validateRequest(userValidation.updateUserSchema), userController.updateUser);
UserRoutes.delete('/user/:id', auth(['admin']), userController.deleteUser);
UserRoutes.patch('/update-location', auth(['agent']), userController.updateLocation);

Purpose	Tailwind Class	Hex Code	Usage Example
Primary Blue	bg-blue-600 / hover:bg-blue-700	#2563EB	Buttons, highlights
Text Dark Gray	text-gray-800	#1F2937	Main headings, important text
Text Medium Gray	text-gray-600	#4B5563	Paragraphs, secondary text
Background Light Gray	bg-gray-100	#F3F4F6	Section background
White (for text/bg)	text-white / bg-white	#FFFFFF	Button text, form backgrounds
